#
# This file is managed by Puppet. Local edits will be lost.
#

server {
  listen        80;
  server_name   "~^(beta\.)?holderdeord.no";

  return 301 $scheme://www.holderdeord.no$request_uri;
}

server {
  listen <%= @listen %>;
  server_name   <%= @server_name %> "~^(beta|www|hdo-app-vm)\.holderdeord\.no$";

  <% if @ssl == true %>
    listen 443 default ssl;

    ssl_protocols              SSLv3 TLSv1;
    ssl_ciphers                HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers  on;

    ssl_certificate            <%= @ssl_path %>.crt;
    ssl_certificate_key        <%= @ssl_path %>.key;

    ssl_session_cache          shared:SSL:10m;
    ssl_session_timeout        5m;
  <% end %>

  proxy_cache_key       "$scheme://$host$uri$is_args$args";
  proxy_cache           hdo;
  proxy_cache_bypass    $http_cache_control; # respect Cache-Control=no-cache from the client
  proxy_cache_use_stale updating; # error timeout invalid_header updating
  proxy_cache_purge     PURGE from all;

  add_header            X-Proxy-Cache $upstream_cache_status; # set HIT/MISS/BYPASS in response

  proxy_set_header      Host $http_host;
  proxy_set_header      X-Real-IP $remote_addr;
  proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header      X-Nginx-Proxy true;
  proxy_set_header      X-Forwarded-Proto $scheme;

  location / {
    proxy_pass http://127.0.0.1:<%= Integer(@listen) + 1 %>;
  }
}

server {
  listen        <%= Integer(@listen) + 1 %>;
  root          <%= scope.lookupvar('public_dir') %>;

  location ~ .(php)$ {
    deny all;
  }

  try_files $uri /system/maintenance.html @passenger;

  location @passenger {
    passenger_enabled        on;
    passenger_min_instances  <%= scope.lookupvar('passenger::params::min_instances') %>;
    passenger_env_var        HTTP_X_FORWARDED_PROTO $scheme;
    rails_env                <%= scope.lookupvar('hdo::params::environment') %>;
  }

  error_page 500 502 504 /500.html;
  error_page 503 @503;

  location = /50x.html {
    root html;
  }

  location = /404.html {
    root html;
  }

  location @503 {
    error_page 405 = /system/maintenance.html;
    if (-f $document_root/system/maintenance.html) {
      rewrite ^(.*)$ /system/maintenance.html break;
    }
    rewrite ^(.*)$ /503.html break;
  }

  if ($request_method !~ ^(GET|HEAD|PUT|POST|DELETE|OPTIONS)$ ){
    return 405;
  }

  if (-f $document_root/system/maintenance.html) {
    return 503;
  }

  location ~ ^/(assets|images|javascripts|stylesheets|swfs|system|uploads)/ {
    gzip_static on;
    expires     max;
    add_header  Cache-Control public;
    add_header  Last-Modified "";
    add_header  ETag "";
    break;
  }

  location = /favicon.ico {
    expires    max;
    add_header Cache-Control public;
  }

  #
  # page caching (won't be needed when we have varnish)
  # this needs to be at the end of this file
  #
  # TODO: use try_files

  # only cache GETs
  if ($request_method !~ ^(GET|HEAD)$) {
    break;
  }

  # root
  if (-f $document_root/cache/$uri/index.html) {
    rewrite (.*) /cache/$1/index.html break;
  }

  # pages like /about, cached with .html but accessed without
  if (-f $document_root/cache/$uri.html) {
    rewrite (.*) /cache/$1.html break;
  }

  # pages like /api/v1/something.xml, cached as xml
  if (-f $document_root/cache/$uri) {
    rewrite (.*) /cache/$1 break;
  }
}
